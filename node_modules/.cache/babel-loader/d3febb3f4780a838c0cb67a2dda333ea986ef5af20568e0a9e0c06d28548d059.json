{"ast":null,"code":"import * as React from \"react\";\nimport * as THREE from \"three\";\nimport { XRControllerModelFactory } from \"three-stdlib\";\nimport { useFrame, extend, createPortal } from \"@react-three/fiber\";\nimport { useXR } from \"./XR.mjs\";\nconst Ray = React.forwardRef(function Ray2(_ref, forwardedRef) {\n  let {\n    target,\n    hideOnBlur = false,\n    ...props\n  } = _ref;\n  const hoverState = useXR(state => state.hoverState);\n  const ray = React.useRef(null);\n  const rayGeometry = React.useMemo(() => new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1)]), []);\n  React.useImperativeHandle(forwardedRef, () => ray.current);\n  useFrame(() => {\n    let rayLength = 1;\n    const intersection = hoverState[target.inputSource.handedness].values().next().value;\n    if (intersection && target.inputSource.handedness !== \"none\") {\n      rayLength = intersection.distance;\n      if (hideOnBlur) ray.current.visible = false;\n    } else if (hideOnBlur) {\n      ray.current.visible = true;\n    }\n    const offset = -0.01;\n    ray.current.scale.z = rayLength + offset;\n  });\n  return /* @__PURE__ */React.createElement(\"line\", {\n    ref: ray,\n    geometry: rayGeometry,\n    \"material-opacity\": 0.8,\n    \"material-transparent\": true,\n    ...props\n  });\n});\nconst modelFactory = new XRControllerModelFactory();\nclass ControllerModel extends THREE.Group {\n  constructor(target) {\n    super();\n    this.add(modelFactory.createControllerModel(target.controller));\n  }\n}\nfunction Controllers(_ref2) {\n  let {\n    rayMaterial = {},\n    hideRaysOnBlur = false\n  } = _ref2;\n  const controllers = useXR(state => state.controllers);\n  const isHandTracking = useXR(state => state.isHandTracking);\n  const rayMaterialProps = React.useMemo(() => Object.entries(rayMaterial).reduce((acc, _ref3) => {\n    let [key, value] = _ref3;\n    return {\n      ...acc,\n      [\"material-\".concat(key)]: value\n    };\n  }, {}), [JSON.stringify(rayMaterial)]);\n  React.useMemo(() => extend({\n    ControllerModel\n  }), []);\n  React.useEffect(() => {\n    for (const target of controllers) {\n      target.controller.dispatchEvent({\n        type: \"connected\",\n        data: target.inputSource,\n        fake: true\n      });\n    }\n  }, [controllers]);\n  return /* @__PURE__ */React.createElement(React.Fragment, null, controllers.map((target, i) => /* @__PURE__ */React.createElement(React.Fragment, {\n    key: i\n  }, createPortal( /* @__PURE__ */React.createElement(\"controllerModel\", {\n    args: [target]\n  }), target.grip), createPortal( /* @__PURE__ */React.createElement(Ray, {\n    visible: !isHandTracking,\n    hideOnBlur: hideRaysOnBlur,\n    target,\n    ...rayMaterialProps\n  }), target.controller))));\n}\nexport { Controllers, Ray };","map":{"version":3,"names":["Ray","React","forwardRef","Ray2","_ref","forwardedRef","target","hideOnBlur","props","hoverState","useXR","state","ray","useRef","rayGeometry","useMemo","THREE","BufferGeometry","setFromPoints","Vector3","useImperativeHandle","current","useFrame","rayLength","intersection","inputSource","handedness","values","next","value","distance","visible","offset","scale","z","createElement","ref","geometry","modelFactory","XRControllerModelFactory","ControllerModel","Group","constructor","add","createControllerModel","controller","Controllers","_ref2","rayMaterial","hideRaysOnBlur","controllers","isHandTracking","rayMaterialProps","Object","entries","reduce","acc","_ref3","key","concat","JSON","stringify","extend","useEffect","dispatchEvent","type","data","fake","Fragment","map","i","createPortal","args","grip"],"sources":["/Users/gegao/Desktop/ardemo/node_modules/@react-three/xr/src/Controllers.tsx"],"sourcesContent":["import * as React from 'react'\nimport * as THREE from 'three'\nimport { XRControllerModelFactory } from 'three-stdlib'\nimport { useFrame, Object3DNode, extend, createPortal } from '@react-three/fiber'\nimport { useXR } from './XR'\nimport { XRController } from './XRController'\n\nexport interface RayProps extends Partial<JSX.IntrinsicElements['object3D']> {\n  /** The XRController to attach the ray to */\n  target: XRController\n  /** Whether to hide the ray on controller blur. Default is `false` */\n  hideOnBlur?: boolean\n}\nexport const Ray = React.forwardRef<THREE.Line, RayProps>(function Ray({ target, hideOnBlur = false, ...props }, forwardedRef) {\n  const hoverState = useXR((state) => state.hoverState)\n  const ray = React.useRef<THREE.Line>(null!)\n  const rayGeometry = React.useMemo(\n    () => new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, -1)]),\n    []\n  )\n  React.useImperativeHandle(forwardedRef, () => ray.current)\n\n  // Show ray line when hovering objects\n  useFrame(() => {\n    let rayLength = 1\n\n    const intersection: THREE.Intersection = hoverState[target.inputSource.handedness].values().next().value\n    if (intersection && target.inputSource.handedness !== 'none') {\n      rayLength = intersection.distance\n      if (hideOnBlur) ray.current.visible = false\n    } else if (hideOnBlur) {\n      ray.current.visible = true\n    }\n\n    // Tiny offset to clip ray on AR devices\n    // that don't have handedness set to 'none'\n    const offset = -0.01\n    ray.current.scale.z = rayLength + offset\n  })\n\n  // @ts-ignore TS assumes that JS is for the web, and overrides line w/SVG props\n  return <line ref={ray} geometry={rayGeometry} material-opacity={0.8} material-transparent={true} {...props} />\n})\n\nconst modelFactory = new XRControllerModelFactory()\n\nclass ControllerModel extends THREE.Group {\n  constructor(target: XRController) {\n    super()\n    this.add(modelFactory.createControllerModel(target.controller))\n  }\n}\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      controllerModel: Object3DNode<ControllerModel, typeof ControllerModel>\n    }\n  }\n}\n\nexport interface ControllersProps {\n  /** Optional material props to pass to controllers' ray indicators */\n  rayMaterial?: JSX.IntrinsicElements['meshBasicMaterial']\n  /** Whether to hide controllers' rays on blur. Default is `false` */\n  hideRaysOnBlur?: boolean\n}\nexport function Controllers({ rayMaterial = {}, hideRaysOnBlur = false }: ControllersProps) {\n  const controllers = useXR((state) => state.controllers)\n  const isHandTracking = useXR((state) => state.isHandTracking)\n  const rayMaterialProps = React.useMemo(\n    () =>\n      Object.entries(rayMaterial).reduce(\n        (acc, [key, value]) => ({\n          ...acc,\n          [`material-${key}`]: value\n        }),\n        {}\n      ),\n    [JSON.stringify(rayMaterial)] // eslint-disable-line react-hooks/exhaustive-deps\n  )\n  React.useMemo(() => extend({ ControllerModel }), [])\n\n  // Send fake connected event (no-op) so models start loading\n  React.useEffect(() => {\n    for (const target of controllers) {\n      target.controller.dispatchEvent({ type: 'connected', data: target.inputSource, fake: true })\n    }\n  }, [controllers])\n\n  return (\n    <>\n      {controllers.map((target, i) => (\n        <React.Fragment key={i}>\n          {createPortal(<controllerModel args={[target]} />, target.grip)}\n          {createPortal(\n            <Ray visible={!isHandTracking} hideOnBlur={hideRaysOnBlur} target={target} {...rayMaterialProps} />,\n            target.controller\n          )}\n        </React.Fragment>\n      ))}\n    </>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}