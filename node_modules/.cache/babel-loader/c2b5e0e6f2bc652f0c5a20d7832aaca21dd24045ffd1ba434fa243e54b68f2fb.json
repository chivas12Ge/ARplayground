{"ast":null,"code":"import * as React from \"react\";\nimport { useXR } from \"./XR.mjs\";\nfunction useXREvent(event, handler) {\n  let {\n    handedness\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const handlerRef = React.useRef(handler);\n  React.useEffect(() => void (handlerRef.current = handler), [handler]);\n  const controllers = useXR(state => state.controllers);\n  React.useEffect(() => {\n    const listeners = controllers.map(target => {\n      if (handedness && target.inputSource.handedness !== handedness) return;\n      const listener = nativeEvent => handlerRef.current({\n        nativeEvent,\n        target\n      });\n      target.controller.addEventListener(event, listener);\n      return () => target.controller.removeEventListener(event, listener);\n    });\n    return () => listeners.forEach(cleanup => cleanup == null ? void 0 : cleanup());\n  }, [controllers, handedness, event]);\n}\nexport { useXREvent };","map":{"version":3,"names":["useXREvent","event","handler","handedness","arguments","length","undefined","handlerRef","React","useRef","useEffect","current","controllers","useXR","state","listeners","map","target","inputSource","listener","nativeEvent","controller","addEventListener","removeEventListener","forEach","cleanup"],"sources":["/Users/gegao/Desktop/ardemo/node_modules/@react-three/xr/src/XREvents.ts"],"sourcesContent":["import * as React from 'react'\nimport { XRController } from './XRController'\nimport { useXR } from './XR'\n\nexport interface XREventRepresentation {\n  type: string\n  target: any\n}\nexport interface XREvent<T extends XREventRepresentation> {\n  nativeEvent: T\n  target: T['target']\n}\n\nexport type XRControllerEventType = Exclude<THREE.XRControllerEventType, XRSessionEventType>\nexport interface XRControllerEvent {\n  type: XRControllerEventType\n  target: XRController\n  data?: XRInputSource\n  fake?: boolean\n}\n\nexport type XREventHandler<T extends XREventRepresentation> = (event: XREvent<T>) => void\nexport interface XREventOptions {\n  handedness?: XRHandedness\n}\n\nexport function useXREvent(event: XRControllerEventType, handler: XREventHandler<XRControllerEvent>, { handedness }: XREventOptions = {}) {\n  const handlerRef = React.useRef<XREventHandler<XRControllerEvent>>(handler)\n  React.useEffect(() => void (handlerRef.current = handler), [handler])\n  const controllers = useXR((state) => state.controllers)\n\n  React.useEffect(() => {\n    const listeners = controllers.map((target) => {\n      if (handedness && target.inputSource.handedness !== handedness) return\n\n      const listener = (nativeEvent: XRControllerEvent) => handlerRef.current({ nativeEvent, target })\n      target.controller.addEventListener(event, listener)\n      return () => target.controller.removeEventListener(event, listener)\n    })\n\n    return () => listeners.forEach((cleanup) => cleanup?.())\n  }, [controllers, handedness, event])\n}\n"],"mappings":";;AA0BO,SAASA,WAAWC,KAAA,EAA8BC,OAAA,EAAiF;EAAA,IAArC;IAAEC;EAAW,IAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAoB;EAC9H,MAAAG,UAAA,GAAaC,KAAA,CAAMC,MAAA,CAA0CP,OAAO;EACpEM,KAAA,CAAAE,SAAA,CAAU,MAAM,MAAMH,UAAA,CAAWI,OAAA,GAAUT,OAAA,GAAU,CAACA,OAAO,CAAC;EACpE,MAAMU,WAAA,GAAcC,KAAA,CAAOC,KAAA,IAAUA,KAAA,CAAMF,WAAW;EAEtDJ,KAAA,CAAME,SAAA,CAAU,MAAM;IACpB,MAAMK,SAAA,GAAYH,WAAA,CAAYI,GAAA,CAAKC,MAAA,IAAW;MACxC,IAAAd,UAAA,IAAcc,MAAA,CAAOC,WAAA,CAAYf,UAAA,KAAeA,UAAA,EAAY;MAE1D,MAAAgB,QAAA,GAAYC,WAAA,IAAmCb,UAAA,CAAWI,OAAA,CAAQ;QAAES,WAAA;QAAaH;MAAA,CAAQ;MACxFA,MAAA,CAAAI,UAAA,CAAWC,gBAAA,CAAiBrB,KAAA,EAAOkB,QAAQ;MAClD,OAAO,MAAMF,MAAA,CAAOI,UAAA,CAAWE,mBAAA,CAAoBtB,KAAA,EAAOkB,QAAQ;IAAA,CACnE;IAED,OAAO,MAAMJ,SAAA,CAAUS,OAAA,CAASC,OAAA,IAAYA,OAAA,oBAAAA,OAAA,EAAW;EACtD,IAACb,WAAA,EAAaT,UAAA,EAAYF,KAAK,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}