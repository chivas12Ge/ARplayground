{"ast":null,"code":"import * as React from \"react\";\nimport * as THREE from \"three\";\nimport create from \"zustand\";\nimport { useThree } from \"@react-three/fiber\";\nimport { XRController } from \"./XRController.mjs\";\nimport { InteractionManager } from \"./Interactions.mjs\";\nconst XRContext = React.createContext(null);\nconst globalSessionStore = create((set, get) => ({\n  set,\n  get,\n  session: null\n}));\nfunction XRManager(_ref) {\n  let {\n    foveation = 0,\n    referenceSpace = \"local-floor\",\n    onSessionStart,\n    onSessionEnd,\n    onVisibilityChange,\n    onInputSourcesChange,\n    children\n  } = _ref;\n  const gl = useThree(state => state.gl);\n  const camera = useThree(state => state.camera);\n  const player = useXR(state => state.player);\n  const set = useXR(state => state.set);\n  const session = useXR(state => state.session);\n  const controllers = useXR(state => state.controllers);\n  React.useEffect(() => {\n    const handlers = [0, 1].map(id => {\n      const target = new XRController(id, gl);\n      const onConnected = () => set(state => ({\n        controllers: [...state.controllers, target]\n      }));\n      const onDisconnected = () => set(state => ({\n        controllers: state.controllers.filter(it => it !== target)\n      }));\n      target.addEventListener(\"connected\", onConnected);\n      target.addEventListener(\"disconnected\", onDisconnected);\n      return () => {\n        target.removeEventListener(\"connected\", onConnected);\n        target.removeEventListener(\"disconnected\", onDisconnected);\n      };\n    });\n    return () => handlers.forEach(cleanup => cleanup());\n  }, [gl, set]);\n  React.useEffect(() => globalSessionStore.subscribe(_ref2 => {\n    let {\n      session: session2\n    } = _ref2;\n    set(() => ({\n      session: session2\n    }));\n    gl.xr.setSession(session2);\n  }), [gl.xr, set]);\n  React.useEffect(() => {\n    gl.xr.setFoveation(foveation);\n    set(() => ({\n      foveation\n    }));\n  }, [gl, foveation, set]);\n  React.useEffect(() => {\n    gl.xr.setReferenceSpaceType(referenceSpace);\n    set(() => ({\n      referenceSpace\n    }));\n  }, [gl.xr, referenceSpace, set]);\n  React.useEffect(() => {\n    if (!session) return;\n    const handleSessionStart = nativeEvent => {\n      set(() => ({\n        isPresenting: true\n      }));\n      onSessionStart == null ? void 0 : onSessionStart({\n        nativeEvent: {\n          ...nativeEvent,\n          target: session\n        },\n        target: session\n      });\n    };\n    const handleSessionEnd = nativeEvent => {\n      set(() => ({\n        isPresenting: false,\n        session: null\n      }));\n      globalSessionStore.setState(() => ({\n        session: null\n      }));\n      onSessionEnd == null ? void 0 : onSessionEnd({\n        nativeEvent: {\n          ...nativeEvent,\n          target: session\n        },\n        target: session\n      });\n    };\n    const handleVisibilityChange = nativeEvent => {\n      onVisibilityChange == null ? void 0 : onVisibilityChange({\n        nativeEvent,\n        target: session\n      });\n    };\n    const handleInputSourcesChange = nativeEvent => {\n      set(() => ({\n        isHandTracking: Object.values(session.inputSources).some(source => source.hand)\n      }));\n      onInputSourcesChange == null ? void 0 : onInputSourcesChange({\n        nativeEvent,\n        target: session\n      });\n    };\n    gl.xr.addEventListener(\"sessionstart\", handleSessionStart);\n    gl.xr.addEventListener(\"sessionend\", handleSessionEnd);\n    session.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    session.addEventListener(\"inputsourceschange\", handleInputSourcesChange);\n    if (gl.xr.isPresenting) handleSessionStart({\n      type: \"sessionstart\",\n      target: session\n    });\n    return () => {\n      gl.xr.removeEventListener(\"sessionstart\", handleSessionStart);\n      gl.xr.removeEventListener(\"sessionend\", handleSessionEnd);\n      session.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      session.removeEventListener(\"inputsourceschange\", handleInputSourcesChange);\n    };\n  }, [session, gl.xr, set, onSessionStart, onSessionEnd, onVisibilityChange, onInputSourcesChange]);\n  return /* @__PURE__ */React.createElement(InteractionManager, null, /* @__PURE__ */React.createElement(\"primitive\", {\n    object: player\n  }, /* @__PURE__ */React.createElement(\"primitive\", {\n    object: camera\n  }), controllers.map((controller, i) => /* @__PURE__ */React.createElement(\"primitive\", {\n    key: i,\n    object: controller\n  }))), children);\n}\nfunction XR(props) {\n  const store = React.useMemo(() => create((set, get) => ({\n    set,\n    get,\n    controllers: [],\n    isPresenting: false,\n    isHandTracking: false,\n    player: new THREE.Group(),\n    session: null,\n    foveation: 0,\n    referenceSpace: \"local-floor\",\n    hoverState: {\n      left: /* @__PURE__ */new Map(),\n      right: /* @__PURE__ */new Map(),\n      none: /* @__PURE__ */new Map()\n    },\n    interactions: /* @__PURE__ */new Map(),\n    hasInteraction(object, eventType) {\n      var _a;\n      return !!((_a = get().interactions.get(object)) == null ? void 0 : _a[eventType].some(handlerRef => handlerRef.current));\n    },\n    getInteraction(object, eventType) {\n      var _a;\n      return (_a = get().interactions.get(object)) == null ? void 0 : _a[eventType].reduce((result, handlerRef) => {\n        if (handlerRef.current) {\n          result.push(handlerRef.current);\n        }\n        return result;\n      }, []);\n    },\n    addInteraction(object, eventType, handlerRef) {\n      const interactions = get().interactions;\n      if (!interactions.has(object)) {\n        interactions.set(object, {\n          onHover: [],\n          onBlur: [],\n          onSelect: [],\n          onSelectEnd: [],\n          onSelectStart: [],\n          onSelectMissed: [],\n          onSqueeze: [],\n          onSqueezeEnd: [],\n          onSqueezeStart: [],\n          onSqueezeMissed: [],\n          onMove: []\n        });\n      }\n      const target = interactions.get(object);\n      target[eventType].push(handlerRef);\n    },\n    removeInteraction(object, eventType, handlerRef) {\n      const target = get().interactions.get(object);\n      if (target) {\n        const interactionIndex = target[eventType].indexOf(handlerRef);\n        if (interactionIndex !== -1) target[eventType].splice(interactionIndex, 1);\n      }\n    }\n  })), []);\n  return /* @__PURE__ */React.createElement(XRContext.Provider, {\n    value: store\n  }, /* @__PURE__ */React.createElement(XRManager, {\n    ...props\n  }));\n}\nconst XRButton = React.forwardRef(function XRButton2(_ref3, ref) {\n  let {\n    mode,\n    sessionInit,\n    enterOnly = false,\n    exitOnly = false,\n    onClick,\n    children,\n    ...props\n  } = _ref3;\n  const [status, setStatus] = React.useState(\"exited\");\n  const label = status === \"unsupported\" ? \"\".concat(mode, \" unsupported\") : \"\".concat(status === \"entered\" ? \"Exit\" : \"Enter\", \" \").concat(mode);\n  const sessionMode = mode === \"inline\" ? mode : \"immersive-\".concat(mode.toLowerCase());\n  React.useEffect(() => {\n    if (!(navigator == null ? void 0 : navigator.xr)) return void setStatus(\"unsupported\");\n    navigator.xr.isSessionSupported(sessionMode).then(supported => setStatus(supported ? \"exited\" : \"unsupported\"));\n  }, [sessionMode]);\n  React.useEffect(() => globalSessionStore.subscribe(state => {\n    if (state.session) {\n      setStatus(\"entered\");\n    } else if (status !== \"unsupported\") {\n      setStatus(\"exited\");\n    }\n  }), [status]);\n  const toggleSession = React.useCallback(async event => {\n    onClick == null ? void 0 : onClick(event);\n    const xrState = globalSessionStore.getState();\n    if (xrState.session && enterOnly) return;\n    if (!xrState.session && exitOnly) return;\n    let session = null;\n    if (xrState.session) {\n      await xrState.session.end();\n    } else {\n      session = await navigator.xr.requestSession(sessionMode, sessionInit);\n    }\n    xrState.set(() => ({\n      session\n    }));\n  }, [onClick, enterOnly, exitOnly, sessionMode, sessionInit]);\n  return /* @__PURE__ */React.createElement(\"button\", {\n    ...props,\n    ref,\n    onClick: status === \"unsupported\" ? onClick : toggleSession\n  }, typeof children === \"function\" ? children(status) : children != null ? children : label);\n});\nconst buttonStyles = {\n  position: \"absolute\",\n  bottom: \"24px\",\n  left: \"50%\",\n  transform: \"translateX(-50%)\",\n  padding: \"12px 24px\",\n  border: \"1px solid white\",\n  borderRadius: \"4px\",\n  background: \"rgba(0, 0, 0, 0.1)\",\n  color: \"white\",\n  font: \"normal 0.8125rem sans-serif\",\n  outline: \"none\",\n  zIndex: 99999,\n  cursor: \"pointer\"\n};\nconst ARButton = React.forwardRef((_ref4, ref) => {\n  let {\n    sessionInit = {\n      domOverlay: typeof document !== \"undefined\" ? {\n        root: document.body\n      } : void 0,\n      optionalFeatures: [\"hit-test\", \"dom-overlay\", \"dom-overlay-for-handheld-ar\"]\n    },\n    children,\n    ...rest\n  } = _ref4;\n  return /* @__PURE__ */React.createElement(XRButton, {\n    ...rest,\n    ref,\n    mode: \"AR\",\n    style: buttonStyles,\n    sessionInit\n  }, children);\n});\nconst VRButton = React.forwardRef((_ref5, ref) => {\n  let {\n    sessionInit = {\n      optionalFeatures: [\"local-floor\", \"bounded-floor\", \"hand-tracking\", \"layers\"]\n    },\n    children,\n    ...rest\n  } = _ref5;\n  return /* @__PURE__ */React.createElement(XRButton, {\n    ...rest,\n    ref,\n    mode: \"VR\",\n    style: buttonStyles,\n    sessionInit\n  }, children);\n});\nfunction useXR() {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state => state;\n  let equalityFn = arguments.length > 1 ? arguments[1] : undefined;\n  const store = React.useContext(XRContext);\n  if (!store) throw new Error(\"useXR must be used within an <XR /> component!\");\n  return store(selector, equalityFn);\n}\nfunction useController(handedness) {\n  const controllers = useXR(state => state.controllers);\n  const controller = React.useMemo(() => controllers.find(_ref6 => {\n    let {\n      inputSource\n    } = _ref6;\n    return inputSource.handedness === handedness;\n  }), [handedness, controllers]);\n  return controller;\n}\nexport { ARButton, VRButton, XR, XRButton, useController, useXR };","map":{"version":3,"names":["XRContext","React","createContext","globalSessionStore","create","set","get","session","XRManager","_ref","foveation","referenceSpace","onSessionStart","onSessionEnd","onVisibilityChange","onInputSourcesChange","children","gl","useThree","state","camera","player","useXR","controllers","useEffect","handlers","map","id","target","XRController","onConnected","onDisconnected","filter","it","addEventListener","removeEventListener","forEach","cleanup","subscribe","_ref2","session2","xr","setSession","setFoveation","setReferenceSpaceType","handleSessionStart","nativeEvent","isPresenting","handleSessionEnd","setState","handleVisibilityChange","handleInputSourcesChange","isHandTracking","Object","values","inputSources","some","source","hand","type","createElement","InteractionManager","object","controller","i","key","XR","props","store","useMemo","THREE","Group","hoverState","left","Map","right","none","interactions","hasInteraction","eventType","_a","handlerRef","current","getInteraction","reduce","result","push","addInteraction","has","onHover","onBlur","onSelect","onSelectEnd","onSelectStart","onSelectMissed","onSqueeze","onSqueezeEnd","onSqueezeStart","onSqueezeMissed","onMove","removeInteraction","interactionIndex","indexOf","splice","Provider","value","XRButton","forwardRef","XRButton2","_ref3","ref","mode","sessionInit","enterOnly","exitOnly","onClick","status","setStatus","useState","label","concat","sessionMode","toLowerCase","navigator","isSessionSupported","then","supported","toggleSession","useCallback","event","xrState","getState","end","requestSession","buttonStyles","position","bottom","transform","padding","border","borderRadius","background","color","font","outline","zIndex","cursor","ARButton","_ref4","domOverlay","document","root","body","optionalFeatures","rest","style","VRButton","_ref5","selector","arguments","length","undefined","equalityFn","useContext","Error","useController","handedness","find","_ref6","inputSource"],"sources":["/Users/gegao/Desktop/ardemo/node_modules/@react-three/xr/src/XR.tsx"],"sourcesContent":["import * as React from 'react'\nimport * as THREE from 'three'\nimport create, { EqualityChecker, GetState, SetState, StateSelector, UseBoundStore } from 'zustand'\nimport { useThree } from '@react-three/fiber'\nimport { XRController } from './XRController'\nimport { InteractionManager, XRInteractionHandler, XRInteractionType } from './Interactions'\nimport { XREventHandler } from './XREvents'\n\nexport interface XRState {\n  set: SetState<XRState>\n  get: GetState<XRState>\n\n  controllers: XRController[]\n  isPresenting: boolean\n  isHandTracking: boolean\n  player: THREE.Group\n  session: XRSession | null\n  foveation: number\n  referenceSpace: XRReferenceSpaceType\n\n  hoverState: Record<XRHandedness, Map<THREE.Object3D, THREE.Intersection>>\n  interactions: Map<THREE.Object3D, Record<XRInteractionType, React.RefObject<XRInteractionHandler>[]>>\n  hasInteraction: (object: THREE.Object3D, eventType: XRInteractionType) => boolean\n  getInteraction: (object: THREE.Object3D, eventType: XRInteractionType) => XRInteractionHandler[] | undefined\n  addInteraction: (object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) => void\n  removeInteraction: (object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) => void\n}\nconst XRContext = React.createContext<UseBoundStore<XRState>>(null!)\n\ninterface GlobalSessionState {\n  set: SetState<GlobalSessionState>\n  get: GetState<GlobalSessionState>\n  session: XRSession | null\n}\nconst globalSessionStore = create<GlobalSessionState>((set, get) => ({ set, get, session: null }))\n\nexport type XRManagerEventType = 'sessionstart' | 'sessionend'\nexport interface XRManagerEvent {\n  type: XRManagerEventType\n  target: XRSession\n}\nexport interface XRProps {\n  /**\n   * Enables foveated rendering. `Default is `0`\n   * 0 = no foveation, full resolution\n   * 1 = maximum foveation, the edges render at lower resolution\n   */\n  foveation?: number\n  /** Type of WebXR reference space to use. Default is `local-space` */\n  referenceSpace?: XRReferenceSpaceType\n  /** Called as an XRSession is requested */\n  onSessionStart?: XREventHandler<XRManagerEvent>\n  /** Called after an XRSession is terminated */\n  onSessionEnd?: XREventHandler<XRManagerEvent>\n  /** Called when an XRSession is hidden or unfocused. */\n  onVisibilityChange?: XREventHandler<XRSessionEvent>\n  /** Called when available inputsources change */\n  onInputSourcesChange?: XREventHandler<XRSessionEvent>\n  children: React.ReactNode\n}\nfunction XRManager({\n  foveation = 0,\n  referenceSpace = 'local-floor',\n  onSessionStart,\n  onSessionEnd,\n  onVisibilityChange,\n  onInputSourcesChange,\n  children\n}: XRProps) {\n  const gl = useThree((state) => state.gl)\n  const camera = useThree((state) => state.camera)\n  const player = useXR((state) => state.player)\n  const set = useXR((state) => state.set)\n  const session = useXR((state) => state.session)\n  const controllers = useXR((state) => state.controllers)\n\n  React.useEffect(() => {\n    const handlers = [0, 1].map((id) => {\n      const target = new XRController(id, gl)\n      const onConnected = () => set((state) => ({ controllers: [...state.controllers, target] }))\n      const onDisconnected = () => set((state) => ({ controllers: state.controllers.filter((it) => it !== target) }))\n\n      target.addEventListener('connected', onConnected)\n      target.addEventListener('disconnected', onDisconnected)\n\n      return () => {\n        target.removeEventListener('connected', onConnected)\n        target.removeEventListener('disconnected', onDisconnected)\n      }\n    })\n\n    return () => handlers.forEach((cleanup) => cleanup())\n  }, [gl, set])\n\n  React.useEffect(\n    () =>\n      globalSessionStore.subscribe(({ session }) => {\n        set(() => ({ session }))\n        gl.xr.setSession(session!)\n      }),\n    [gl.xr, set]\n  )\n\n  React.useEffect(() => {\n    gl.xr.setFoveation(foveation)\n    set(() => ({ foveation }))\n  }, [gl, foveation, set])\n\n  React.useEffect(() => {\n    gl.xr.setReferenceSpaceType(referenceSpace)\n    set(() => ({ referenceSpace }))\n  }, [gl.xr, referenceSpace, set])\n\n  React.useEffect(() => {\n    if (!session) return\n\n    const handleSessionStart = (nativeEvent: XRManagerEvent) => {\n      set(() => ({ isPresenting: true }))\n      onSessionStart?.({ nativeEvent: { ...nativeEvent, target: session }, target: session })\n    }\n    const handleSessionEnd = (nativeEvent: XRManagerEvent) => {\n      set(() => ({ isPresenting: false, session: null }))\n      globalSessionStore.setState(() => ({ session: null }))\n      onSessionEnd?.({ nativeEvent: { ...nativeEvent, target: session }, target: session })\n    }\n    const handleVisibilityChange = (nativeEvent: XRSessionEvent) => {\n      onVisibilityChange?.({ nativeEvent, target: session })\n    }\n    const handleInputSourcesChange = (nativeEvent: XRSessionEvent) => {\n      set(() => ({ isHandTracking: Object.values(session.inputSources).some((source) => source.hand) }))\n      onInputSourcesChange?.({ nativeEvent, target: session })\n    }\n\n    gl.xr.addEventListener('sessionstart', handleSessionStart)\n    gl.xr.addEventListener('sessionend', handleSessionEnd)\n    session.addEventListener('visibilitychange', handleVisibilityChange)\n    session.addEventListener('inputsourceschange', handleInputSourcesChange)\n\n    // Eagerly call sessionstart when late\n    if (gl.xr.isPresenting) handleSessionStart({ type: 'sessionstart', target: session })\n\n    return () => {\n      gl.xr.removeEventListener('sessionstart', handleSessionStart)\n      gl.xr.removeEventListener('sessionend', handleSessionEnd)\n      session.removeEventListener('visibilitychange', handleVisibilityChange)\n      session.removeEventListener('inputsourceschange', handleInputSourcesChange)\n    }\n  }, [session, gl.xr, set, onSessionStart, onSessionEnd, onVisibilityChange, onInputSourcesChange])\n\n  return (\n    <InteractionManager>\n      <primitive object={player}>\n        <primitive object={camera} />\n        {controllers.map((controller, i) => (\n          <primitive key={i} object={controller} />\n        ))}\n      </primitive>\n      {children}\n    </InteractionManager>\n  )\n}\n\nexport function XR(props: XRProps) {\n  const store = React.useMemo(\n    () =>\n      create<XRState>((set, get) => ({\n        set,\n        get,\n\n        controllers: [],\n        isPresenting: false,\n        isHandTracking: false,\n        player: new THREE.Group(),\n        session: null,\n        foveation: 0,\n        referenceSpace: 'local-floor',\n\n        hoverState: {\n          left: new Map(),\n          right: new Map(),\n          none: new Map()\n        },\n        interactions: new Map(),\n        hasInteraction(object: THREE.Object3D, eventType: XRInteractionType) {\n          return !!get()\n            .interactions.get(object)\n            ?.[eventType].some((handlerRef) => handlerRef.current)\n        },\n        getInteraction(object: THREE.Object3D, eventType: XRInteractionType) {\n          return get()\n            .interactions.get(object)\n            ?.[eventType].reduce((result, handlerRef) => {\n              if (handlerRef.current) {\n                result.push(handlerRef.current)\n              }\n              return result\n            }, [] as XRInteractionHandler[])\n        },\n        addInteraction(object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) {\n          const interactions = get().interactions\n          if (!interactions.has(object)) {\n            interactions.set(object, {\n              onHover: [],\n              onBlur: [],\n              onSelect: [],\n              onSelectEnd: [],\n              onSelectStart: [],\n              onSelectMissed: [],\n              onSqueeze: [],\n              onSqueezeEnd: [],\n              onSqueezeStart: [],\n              onSqueezeMissed: [],\n              onMove: []\n            })\n          }\n\n          const target = interactions.get(object)!\n          target[eventType].push(handlerRef)\n        },\n        removeInteraction(object: THREE.Object3D, eventType: XRInteractionType, handlerRef: React.RefObject<XRInteractionHandler>) {\n          const target = get().interactions.get(object)\n          if (target) {\n            const interactionIndex = target[eventType].indexOf(handlerRef)\n            if (interactionIndex !== -1) target[eventType].splice(interactionIndex, 1)\n          }\n        }\n      })),\n    []\n  )\n\n  return (\n    <XRContext.Provider value={store}>\n      <XRManager {...props} />\n    </XRContext.Provider>\n  )\n}\n\nexport type XRButtonStatus = 'unsupported' | 'exited' | 'entered'\nexport interface XRButtonProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'children'> {\n  /** The type of `XRSession` to create */\n  mode: 'AR' | 'VR' | 'inline'\n  /**\n   * `XRSession` configuration options\n   * @see https://immersive-web.github.io/webxr/#feature-dependencies\n   */\n  sessionInit?: XRSessionInit\n  /** Whether this button should only enter an `XRSession`. Default is `false` */\n  enterOnly?: boolean\n  /** Whether this button should only exit an `XRSession`. Default is `false` */\n  exitOnly?: boolean\n  /** React children, can also accept a callback returning an `XRButtonStatus` */\n  children?: React.ReactNode | ((status: XRButtonStatus) => React.ReactNode)\n}\n\nexport const XRButton = React.forwardRef<HTMLButtonElement, XRButtonProps>(function XRButton(\n  { mode, sessionInit, enterOnly = false, exitOnly = false, onClick, children, ...props },\n  ref\n) {\n  const [status, setStatus] = React.useState<XRButtonStatus>('exited')\n  const label = status === 'unsupported' ? `${mode} unsupported` : `${status === 'entered' ? 'Exit' : 'Enter'} ${mode}`\n  const sessionMode = (mode === 'inline' ? mode : `immersive-${mode.toLowerCase()}`) as XRSessionMode\n\n  React.useEffect(() => {\n    if (!navigator?.xr) return void setStatus('unsupported')\n    navigator.xr!.isSessionSupported(sessionMode).then((supported) => setStatus(supported ? 'exited' : 'unsupported'))\n  }, [sessionMode])\n\n  React.useEffect(\n    () =>\n      globalSessionStore.subscribe((state) => {\n        if (state.session) {\n          setStatus('entered')\n        } else if (status !== 'unsupported') {\n          setStatus('exited')\n        }\n      }),\n    [status]\n  )\n\n  const toggleSession = React.useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      onClick?.(event)\n\n      const xrState = globalSessionStore.getState()\n\n      // Bail if button only configures exit/enter\n      if (xrState.session && enterOnly) return\n      if (!xrState.session && exitOnly) return\n\n      let session: XRSession | null = null\n\n      // Exit/enter session\n      if (xrState.session) {\n        await xrState.session.end()\n      } else {\n        session = await navigator.xr!.requestSession(sessionMode, sessionInit)\n      }\n\n      xrState.set(() => ({ session }))\n    },\n    [onClick, enterOnly, exitOnly, sessionMode, sessionInit]\n  )\n\n  return (\n    <button {...props} ref={ref} onClick={status === 'unsupported' ? onClick : toggleSession}>\n      {typeof children === 'function' ? children(status) : children ?? label}\n    </button>\n  )\n})\n\nconst buttonStyles: any = {\n  position: 'absolute',\n  bottom: '24px',\n  left: '50%',\n  transform: 'translateX(-50%)',\n  padding: '12px 24px',\n  border: '1px solid white',\n  borderRadius: '4px',\n  background: 'rgba(0, 0, 0, 0.1)',\n  color: 'white',\n  font: 'normal 0.8125rem sans-serif',\n  outline: 'none',\n  zIndex: 99999,\n  cursor: 'pointer'\n}\n\nexport const ARButton = React.forwardRef<HTMLButtonElement, Omit<XRButtonProps, 'mode'>>(\n  (\n    {\n      sessionInit = {\n        // @ts-ignore\n        domOverlay: typeof document !== 'undefined' ? { root: document.body } : undefined,\n        optionalFeatures: ['hit-test', 'dom-overlay', 'dom-overlay-for-handheld-ar']\n      },\n      children,\n      ...rest\n    },\n    ref\n  ) => (\n    <XRButton {...rest} ref={ref} mode=\"AR\" style={buttonStyles} sessionInit={sessionInit}>\n      {children}\n    </XRButton>\n  )\n)\n\nexport const VRButton = React.forwardRef<HTMLButtonElement, Omit<XRButtonProps, 'mode'>>(\n  ({ sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] }, children, ...rest }, ref) => (\n    <XRButton {...rest} ref={ref} mode=\"VR\" style={buttonStyles} sessionInit={sessionInit}>\n      {children}\n    </XRButton>\n  )\n)\n\nexport function useXR<T = XRState>(\n  selector: StateSelector<XRState, T> = (state) => state as unknown as T,\n  equalityFn?: EqualityChecker<T>\n) {\n  const store = React.useContext(XRContext)\n  if (!store) throw new Error('useXR must be used within an <XR /> component!')\n  return store(selector, equalityFn)\n}\n\nexport function useController(handedness: XRHandedness) {\n  const controllers = useXR((state) => state.controllers)\n  const controller = React.useMemo(\n    () => controllers.find(({ inputSource }) => inputSource.handedness === handedness),\n    [handedness, controllers]\n  )\n\n  return controller\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}