{"ast":null,"code":"import * as React from \"react\";\nimport { extend, createPortal } from \"@react-three/fiber\";\nimport { OculusHandModel } from \"three-stdlib\";\nimport { useXR } from \"./XR.mjs\";\nfunction Hands(_ref) {\n  let {\n    modelLeft,\n    modelRight\n  } = _ref;\n  const controllers = useXR(state => state.controllers);\n  React.useMemo(() => extend({\n    OculusHandModel\n  }), []);\n  React.useEffect(() => {\n    for (const target of controllers) {\n      target.hand.dispatchEvent({\n        type: \"connected\",\n        data: target.inputSource,\n        fake: true\n      });\n    }\n  }, [controllers, modelLeft, modelRight]);\n  return /* @__PURE__ */React.createElement(React.Fragment, null, controllers.map(_ref2 => {\n    let {\n      hand\n    } = _ref2;\n    return createPortal( /* @__PURE__ */React.createElement(\"oculusHandModel\", {\n      args: [hand, modelLeft, modelRight]\n    }), hand);\n  }));\n}\nexport { Hands };","map":{"version":3,"names":["Hands","_ref","modelLeft","modelRight","controllers","useXR","state","React","useMemo","extend","OculusHandModel","useEffect","target","hand","dispatchEvent","type","data","inputSource","fake","createElement","Fragment","map","_ref2","createPortal","args"],"sources":["/Users/gegao/Desktop/ardemo/node_modules/@react-three/xr/src/Hands.tsx"],"sourcesContent":["import * as React from 'react'\nimport { Object3DNode, extend, createPortal } from '@react-three/fiber'\nimport { OculusHandModel } from 'three-stdlib'\nimport { useXR } from './XR'\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      oculusHandModel: Object3DNode<OculusHandModel, typeof OculusHandModel>\n    }\n  }\n}\n\nexport interface HandsProps {\n  modelLeft?: string\n  modelRight?: string\n}\nexport function Hands({ modelLeft, modelRight }: HandsProps) {\n  const controllers = useXR((state) => state.controllers)\n  React.useMemo(() => extend({ OculusHandModel }), [])\n\n  // Send fake connected event (no-op) so models start loading\n  React.useEffect(() => {\n    for (const target of controllers) {\n      target.hand.dispatchEvent({ type: 'connected', data: target.inputSource, fake: true })\n    }\n  }, [controllers, modelLeft, modelRight])\n\n  return <>{controllers.map(({ hand }) => createPortal(<oculusHandModel args={[hand, modelLeft, modelRight]} />, hand))}</>\n}\n"],"mappings":";;;;AAiBO,SAASA,MAAAC,IAAA,EAA6C;EAAA,IAAvC;IAAEC,SAAA;IAAWC;EAAA,IAAAF,IAAA;EACjC,MAAMG,WAAA,GAAcC,KAAA,CAAOC,KAAA,IAAUA,KAAA,CAAMF,WAAW;EAChDG,KAAA,CAAAC,OAAA,CAAQ,MAAMC,MAAA,CAAO;IAAEC;EAAiB,IAAG,EAAE;EAGnDH,KAAA,CAAMI,SAAA,CAAU,MAAM;IACpB,WAAWC,MAAA,IAAUR,WAAA,EAAa;MACzBQ,MAAA,CAAAC,IAAA,CAAKC,aAAA,CAAc;QAAEC,IAAA,EAAM;QAAaC,IAAA,EAAMJ,MAAA,CAAOK,WAAA;QAAaC,IAAA,EAAM;MAAM;IACvF;EACC,IAACd,WAAA,EAAaF,SAAA,EAAWC,UAAU,CAAC;EAEhC,sBAAAI,KAAA,CAAAY,aAAA,CAAAZ,KAAA,CAAAa,QAAA,QAAGhB,WAAA,CAAYiB,GAAA,CAAIC,KAAA;IAAA,IAAC;MAAET;IAAK,IAAAS,KAAA;IAAA,OAAMC,YAAA,EAAc,eAAAhB,KAAA,CAAAY,aAAA;MAAgBK,IAAA,EAAM,CAACX,IAAA,EAAMX,SAAA,EAAWC,UAAU;IAAA,CAAG,GAAIU,IAAI,CAAC;EAAA,EAAE;AACxH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}